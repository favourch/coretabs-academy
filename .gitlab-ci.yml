# Reference: https://www.exclamationlabs.com/blog/continuous-deployment-to-npm-using-gitlab-ci/

# GitLab uses docker in the background, so we need to specify the 
# image versions. This is useful because we're freely to use
# multiple node versions to work with it. They come from the docker
# repo.
image: docker:stable

variables:
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using Kubernetes executor, the variable should be set to
  # tcp://localhost:2375 because of how Kubernetes executor connects services
  # to the job container
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2
  HOST_ENV: production
  DOCKER_HOST: tcp://docker:2375


services:
- docker:dind

# We tell GitLab to install all the packages
# before running anything.
before_script:  
  - apk add --no-cache python py2-pip bash git openssh
  - docker info

# You specify the stages. Those are the steps that GitLab will go through 
# Order matters. 
stages:
  - staging
  - production

#test:
#  variables:
#    HOST_ENV: dev
#  stage: test
#  before_script:
#    - apk add --no-cache bash
#    - bash ./ci-build-before-testing.sh
#  script:
#    - newman run ./tests/postman/academy_api_collection.json -e ./tests/postman/discourse_api_environment.json

build-base:
  only:
    - build-base
  stage: staging
  script:
    - apk add --no-cache python py2-pip bash git openssh
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build . -t coretabsacademy/academy_api_base -f production.api.base.dockerfile --no-cache
    - docker push coretabsacademy/academy_api_base
    - docker build . -t coretabsacademy/academy_spa_base -f production.spa.base.dockerfile --no-cache
    - docker push coretabsacademy/academy_spa_base

deploy-dev:
  only:
    - develop
  stage: staging
  before_script:
    - apk add --no-cache python py2-pip bash git openssh
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build . -t coretabsacademy/academy_api -f production.api.dockerfile --no-cache
    - docker push coretabsacademy/academy_api
    - docker build . -t coretabsacademy/academy_spa_staging -f production.spa.dockerfile --build-arg API_BASE_URL="https://api-dev.coretabs.net" --build-arg MAINTENANCE_MODE=false --no-cache
    - docker push coretabsacademy/academy_spa_staging
  script:
    - pip install awsebcli --upgrade
    - git checkout develop
    - eb init coretabs-academy -r us-east-2 -p "$EB_PLATFORM"
    - eb use staging
    - eb deploy   

deploy-prod:
  only:
    - master
  stage: production
  before_script:
    - apk add --no-cache python py2-pip bash git openssh
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build . -t coretabsacademy/academy_api -f production.api.dockerfile --no-cache
    - docker push coretabsacademy/academy_api
    - docker build . -t coretabsacademy/academy_spa -f production.spa.dockerfile --build-arg API_BASE_URL="https://api.coretabs.net" --build-arg MAINTENANCE_MODE=false --no-cache
    - docker push coretabsacademy/academy_spa
  script:
    - pip install awsebcli --upgrade
    - git checkout master
    - cp Dockerrun.aws.production.json Dockerrun.aws.json
    - rm Dockerrun.aws.production.json
    - git add .
    - eb init coretabs-academy -r us-east-2 -p "$EB_PLATFORM"
    - eb use production
    - eb deploy --staged
  when: manual
